@model WebApp.Models.Package.CreatePackageViewModel
@{
    ViewData["Title"] = "Create Package";
}

<div class="container">
    <h1>Create Package</h1>

    <form asp-action="Create" method="post" id="createPackageForm">
        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

        <div class="row">
            <div class="col-md-6">
                <div class="mb-3">
                    <label asp-for="Name" class="form-label"></label>
                    <input asp-for="Name" class="form-control" />
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="City" class="form-label"></label>
                    <select asp-for="City" asp-items="Html.GetEnumSelectList<Domain.Enums.City>()" class="form-select">
                        <option value="">Select City</option>
                    </select>
                    <span asp-validation-for="City" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="CafeteriaLocation" class="form-label"></label>
                    <select asp-for="CafeteriaLocation" asp-items="Html.GetEnumSelectList<Domain.Enums.CafeteriaLocation>()" class="form-select">
                        <option value="">Select Location</option>
                    </select>
                    <span asp-validation-for="CafeteriaLocation" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="MealType" class="form-label"></label>
                    <select asp-for="MealType" asp-items="Html.GetEnumSelectList<Domain.Enums.MealType>()" class="form-select">
                        <option value="">Select Type</option>
                    </select>
                    <span asp-validation-for="MealType" class="text-danger"></span>
                </div>
            </div>

            <div class="col-md-6">
                <div class="mb-3">
                    <label asp-for="PickupDateTime" class="form-label"></label>
                    <input asp-for="PickupDateTime" class="form-control" type="datetime-local" />
                    <span asp-validation-for="PickupDateTime" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="LastReservationDateTime" class="form-label"></label>
                    <input asp-for="LastReservationDateTime" class="form-control" type="datetime-local" />
                    <span asp-validation-for="LastReservationDateTime" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <label asp-for="Price" class="form-label"></label>
                    <div class="input-group">
                        <span class="input-group-text">â‚¬</span>
                        <input asp-for="Price" class="form-control" type="number" step="0.01" min="0.01" max="100.00" />
                    </div>
                    <span asp-validation-for="Price" class="text-danger"></span>
                </div>

                <div class="mb-3">
                    <div class="form-check">
                        <input asp-for="IsAdultOnly" class="form-check-input" type="checkbox" />
                        <label asp-for="IsAdultOnly" class="form-check-label"></label>
                    </div>
                </div>
            </div>
        </div>

        <div class="row">
            <div class="col-12">
                <div class="mb-3">
                    <label asp-for="ExampleProducts" class="form-label"></label>
                    <div id="productsContainer">
                        <div class="input-group mb-2">
                            <input type="text" name="ExampleProducts[0]" class="form-control product-input" 
                                   placeholder="Product name" required 
                                   data-val="true" 
                                   data-val-required="Product name is required" />
                            <button type="button" class="btn btn-danger remove-product" onclick="removeProduct(this)" style="display: none;">Remove</button>
                        </div>
                    </div>
                    <button type="button" class="btn btn-secondary" onclick="addProduct()">Add Product</button>
                    <div id="productsError" class="text-danger"></div>
                    <span asp-validation-for="ExampleProducts" class="text-danger"></span>
                </div>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col">
                <button type="submit" class="btn btn-primary">Create Package</button>
                <a asp-action="Index" class="btn btn-secondary">Cancel</a>
            </div>
        </div>
    </form>
</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        let productIndex = 1;

        function validateProducts() {
            const inputs = document.querySelectorAll('.product-input');
            let isValid = true;
            const errorDiv = document.getElementById('productsError');
            errorDiv.textContent = '';

            inputs.forEach(input => {
                if (!input.value.trim()) {
                    isValid = false;
                    input.classList.add('is-invalid');
                } else {
                    input.classList.remove('is-invalid');
                }
            });

            if (!isValid) {
                errorDiv.textContent = 'All product names are required.';
            }

            return isValid;
        }

        function addProduct() {
            const container = document.getElementById('productsContainer');
            const div = document.createElement('div');
            div.className = 'input-group mb-2';
            div.innerHTML = `
                <input type="text" name="ExampleProducts[${productIndex}]" class="form-control product-input" 
                       placeholder="Product name" required
                       data-val="true"
                       data-val-required="Product name is required" />
                <button type="button" class="btn btn-danger remove-product" onclick="removeProduct(this)">Remove</button>
            `;
            container.appendChild(div);
            productIndex++;
            updateRemoveButtons();
        }

        function removeProduct(button) {
            const inputGroup = button.closest('.input-group');
            if (inputGroup) {
                inputGroup.remove();
                reindexProducts();
                updateRemoveButtons();
                validateProducts();
            }
        }

        function reindexProducts() {
            const inputs = document.querySelectorAll('.product-input');
            inputs.forEach((input, index) => {
                input.name = `ExampleProducts[${index}]`;
            });
            productIndex = inputs.length;
        }

        function updateRemoveButtons() {
            const containers = document.querySelectorAll('#productsContainer .input-group');
            const removeButtons = document.querySelectorAll('.remove-product');
            
            removeButtons.forEach(button => {
                button.style.display = containers.length > 1 ? 'block' : 'none';
            });
        }

        document.getElementById('createPackageForm').addEventListener('submit', function(e) {
            if (!validateProducts()) {
                e.preventDefault();
                return false;
            }
            return true;
        });

        // Add input event listeners to validate on typing
        document.getElementById('productsContainer').addEventListener('input', function(e) {
            if (e.target.classList.contains('product-input')) {
                validateProducts();
            }
        });
    </script>
}
